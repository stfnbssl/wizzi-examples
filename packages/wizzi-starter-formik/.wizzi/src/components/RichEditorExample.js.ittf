module
    kind react
    import React from 'react'
    import 
        @ Editor
        @ EditorState
        @ RichUtils
        from 'draft-js'
    export-default 
        react RichEditorExample
            => onChange
                param editorState
                _ this.props.onChange('editorState', editorState)
            => focus
                _ this.refs.editor.focus
            => handleKeyCommand
                param command
                const 
                    { 
                        @ editorState
                    = this.props
                const newState = RichUtils.handleKeyCommand(editorState, command)
                if newState
                    _ this.onChange(newState)
                    return true
                return false
            => onTab
                param e
                const maxDepth = 4
                _ this.onChange(RichUtils.onTab(e, this.props.editorState, maxDepth))
            => toggleBlockType
                param blockType
                _ this.onChange(RichUtils.toggleBlockType(this.props.editorState, blockType))
            => toggleInlineStyle
                param inlineStyle
                _ this.onChange(RichUtils.toggleInlineStyle(this.props.editorState, inlineStyle))
            render
                const 
                    { 
                        @ editorState
                    = this.props
                # If the user changes block type before entering any text, we can
                # either style the placeholder or hide it. Let's just hide it now.
                let className = 'RichEditor-editor'
                var contentState
                    _ editorState.getCurrentContent
                if 
                    test
                        op! 
                            _ contentState.hasText
                    if 
                        test
                            !== 
                                _ contentState.getBlockMap
                                    ._ first
                                    ._ getType
                                + 'unstyled'
                        set className += ' RichEditor-hidePlaceholder'
                return 
                    div 
                        @ style
                            { 
                                @ margin '2rem 0'
                        div 
                            @ className "RichEditor-root"
                            < BlockStyleControls 
                                @ editorState {editorState}
                                @ onToggle {this.toggleBlockType}
                            < InlineStyleControls 
                                @ editorState {editorState}
                                @ onToggle {this.toggleInlineStyle}
                            div 
                                @ className {className}
                                @ onClick {this.focus}
                                < Editor 
                                    @ blockStyleFn {getBlockStyle}
                                    @ customStyleMap {styleMap}
                                    @ editorState {editorState}
                                    @ handleKeyCommand {this.handleKeyCommand}
                                    @ onChange {this.onChange}
                                    @ onTab {this.onTab}
                                    @ placeholder "Send a welcome message..."
                                    @ ref "editor"
                                    @ spellCheck {true}
    # Custom overrides for "code" style.
    const styleMap
        { 
            { CODE
                @ backgroundColor 'rgba(0, 0, 0, 0.05)'
                @ fontFamily '"Inconsolata", "Menlo", "Consolas", monospace'
                @ fontSize 16
                @ padding 2
    function getBlockStyle
        param block
        switch block.getType()
            case 'blockquote'
                return 'RichEditor-blockquote'
            default 
                return null
    class StyleButton
        super React.Component
        ctor 
            _ super
            set this.onToggle =
                => 
                    param e
                    _ e.preventDefault
                    _ this.props.onToggle(this.props.style)
        m render
            let className = 'RichEditor-styleButton'
            if this.props.active
                set className += ' RichEditor-activeButton'
            return 
                span 
                    @ className {className}
                    @ onMouseDown {this.onToggle}
                    + {this.props.label}
    const BLOCK_TYPES
        [ 
            { 
                @ label 'H1'
                @ style 'header-one'
            { 
                @ label 'H2'
                @ style 'header-two'
            { 
                @ label 'H3'
                @ style 'header-three'
            { 
                @ label 'H4'
                @ style 'header-four'
            { 
                @ label 'H5'
                @ style 'header-five'
            { 
                @ label 'H6'
                @ style 'header-six'
            { 
                @ label 'Blockquote'
                @ style 'blockquote'
            { 
                @ label 'UL'
                @ style 'unordered-list-item'
            { 
                @ label 'OL'
                @ style 'ordered-list-item'
            { 
                @ label 'Code Block'
                @ style 'code-block'
    const BlockStyleControls
        => 
            param props
            const 
                { 
                    @ editorState
                = props
            const selection
                _ editorState.getSelection
            const blockType
                _ editorState.getCurrentContent
                    ._ getBlockForKey
                        _ selection.getStartKey
                    ._ getType
            return 
                div 
                    @ className "RichEditor-controls"
                    { 
                        _ BLOCK_TYPES.map
                            => 
                                param type
                                < StyleButton 
                                    @ key {type.label}
                                    @ active {type.style === blockType}
                                    @ label {type.label}
                                    @ onToggle {props.onToggle}
                                    @ style {type.style}
    var INLINE_STYLES
        [ 
            { 
                @ label 'Bold'
                @ style 'BOLD'
            { 
                @ label 'Italic'
                @ style 'ITALIC'
            { 
                @ label 'Underline'
                @ style 'UNDERLINE'
            { 
                @ label 'Monospace'
                @ style 'CODE'
    const InlineStyleControls
        => 
            param props
            var currentStyle
                _ props.editorState.getCurrentInlineStyle
            return 
                div 
                    @ className "RichEditor-controls"
                    { 
                        _ INLINE_STYLES.map
                            => 
                                param type
                                < StyleButton 
                                    @ key {type.label}
                                    @ active {currentStyle.has(type.style)}
                                    @ label {type.label}
                                    @ onToggle {props.onToggle}
                                    @ style {type.style}
