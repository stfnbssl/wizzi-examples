module
	kind react

	$include app-options
	$ 
		var md = { name: 'App' }

	app/container(&md, &app)
	
		$append  imports
			import dhQuery from 'dom-helpers/query'
			import App from '../components/App'
			import StylesData from './StylesData'

		state
			@ selectedHtmlFragmentId null
			@ selectedRuleId null
			@ selectedStyleGroupId null
			@ htmlFragments null
			@ cssRules null
			@ styleGroupIds []
			@ selectedHtmlFragmentRules {}
			@ selectedStyleGroupMetaForm null
			@ styleGroupIds []

		will-mount
			set this.stylesData = new StylesData()
			log 'componentWillMount'
			_ this.refreshStylesState
				=>
					_ this.updateDimensions()
		
		did-mount
			_ window.addEventListener
				@ "resize"
				@ this.updateDimensions

		=> updateDimensions
			_ this.setState
				{
					@ ...this.state
					@ width dhQuery.width(window)
					@ height dhQuery.height(window)
			
		=> handleSelectedRuleChange
			param controlId
			param controlValue

			log 'csstyles.AppContainer.handleSelectedRuleChange', controlId, controlValue

			_ this.stylesData.selectRule(controlValue)
			_ this.refreshStylesState()

		=> handleSelectedStyleGroupChange
			param controlId
			param controlValue

			log 'csstyles.AppContainer.handleSelectedStyleGroupChange', controlId, controlValue

			_ this.stylesData.selectStyleGroup(controlValue)
			_ this.refreshStylesState()
				
		=> handleSelectedHtmlFragmentChange
			param controlId
			param controlValue

			log 'csstyles.AppContainer.handleSelectedHtmlFragmentChange', controlId, controlValue

			_ this.stylesData.selectHtmlFragment(controlValue)
			_ this.refreshStylesState()

		=> handleStyleValuesChange
			param id
			param values
				
			log 'csstyles.AppContainer.handleStyleValuesChange', id, values
			_ this.stylesData.updateStyles(values)
			_ this.refreshStylesState()
				
		will-unmount
			_ window.removeEventListener
				@ "resize"
				@ this.updateDimensions

		m refreshStylesState
			param callback
			log 'refreshStylesState.stylesData', this.stylesData
			_ this.setState
				{
					@ ...this.state
					@ htmlFragments this.stylesData.htmlFragments
					@ cssRules this.stylesData.cssRules
					@ selectedHtmlFragmentId this.stylesData.selectedHtmlFragmentId
					@ selectedRuleId this.stylesData.selectedRuleId
					@ selectedStyleGroupId this.stylesData.selectedStyleGroupId
					@ selectedHtmlFragmentRules this.stylesData.selectedHtmlFragmentRules
					@ selectedHtmlFragmentRuleIds this.stylesData.selectedHtmlFragmentRuleIds
					@ styleGroupIds this.stylesData.styleGroupIds
					@ selectedStyleGroupMetaForm this.stylesData.selectedStyleGroupMetaForm
				=>
					log 'refreshStylesState', this.state
					if callback
						_ callback()
			
		render
			log 'render.state', this.state
			
			prop width
			prop height
			
			return
				div
					{
						iif this.state.selectedStyleGroupMetaForm
							then
								< App
									@ htmlFragments {this.state.htmlFragments}
									@ cssRules {this.state.cssRules}
									@ selectedHtmlFragmentId {this.state.selectedHtmlFragmentId}
									@ selectedRuleId {this.state.selectedRuleId}
									@ selectedStyleGroupId {this.state.selectedStyleGroupId}
									@ htmlFragmentsIds {Object.keys(this.state.htmlFragments)}
									@ selectedHtmlFragmentRuleIds {this.state.selectedHtmlFragmentRuleIds}
									@ styleGroupIds {this.state.styleGroupIds}
									@ selectedHtmlFragmentRules {this.state.selectedHtmlFragmentRules}
									@ selectedStyleGroupMetaForm {this.state.selectedStyleGroupMetaForm}
									@ onSelectedHtmlFragmentChange {this.handleSelectedHtmlFragmentChange}
									@ onSelectedRuleChange {this.handleSelectedRuleChange}
									@ onSelectedStyleGroupChange {this.handleSelectedStyleGroupChange}
									@ onStyleValuesChange {this.handleStyleValuesChange}
							else
								h1 Loading ...
						
					$*
					div App size: {width}px x {height}px
					div Window size: {this.state.width}px x {this.state.height}px
					*$