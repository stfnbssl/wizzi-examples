module
	kind react

	$include app-options
	$ 
		var md = { name: 'StyledHtmlElement' }

	app/component(&md, &app)

		$append imports

		prop htmlFragmentMeta
			{
			required
		prop cssRules
			{
			required

		state
			@ elementEvents {}
			@ elementSelectorStates {}

		=> setSelectorState
			param name
			param eventIn
			param eventOut
			const {htmlFragmentMeta, cssRules} = this.props
			const nameLen = name.length + 1
			if cssRules
				for var k in cssRules
					# log 'style is :' + name + ', k.slice(-' + nameLen + ')', k.slice(-nameLen)
					if k.slice(-nameLen) === ':' + name
						# log 'style is :' + name
						const basestyle = k.substr(0, k.length-nameLen)
						if htmlFragmentMeta.class && htmlFragmentMeta.class.split(' ').indexOf(basestyle) > -1
							# log 'has ' + name + ' selector', htmlFragmentMeta.class.split(' '), basestyle, htmlFragmentMeta.class.split(' ').indexOf(basestyle) > -1
							_ this.setState
								{
									@ elementEvents
										{
											@ ...this.state.elementEvents
											@ [eventIn]
												=>
													# log '---- ' + eventIn, this.state.elementSelectorStates
													_ this.setState
														{
															@ elementSelectorStates
																{
																	@ ...this.state.elementSelectorStates
																	@ [k] true
											@ [eventOut]
												=>
													# log '---- ' + eventOut, this.state.elementSelectorStates
													_ this.setState
														{
															@ elementSelectorStates
																{
																	@ ...this.state.elementSelectorStates
																	@ [k] false

		did-mount
			_ this.setSelectorState('hover', 'onMouseEnter', 'onMouseOut')
			_ this.setSelectorState('focus', 'onFocus', 'onBlur')

		render
			prop htmlFragmentMeta
			prop cssRules

			# log "htmlFragmentMeta", htmlFragmentMeta

			const elementProps = {}
			const elementEvents = {}
			const children = []
			if htmlFragmentMeta.text && htmlFragmentMeta.text.length > 0
				_ children.push(htmlFragmentMeta.text)

			if htmlFragmentMeta.children && htmlFragmentMeta.children.length > 0
				foreach c in htmlFragmentMeta.children
					if c.prop
						set elementProps[c.prop] = c.value
					elif c.tag
						# log 'children.push.React.createElement', htmlFragmentMeta.tag, c.tag
						_ children.push
							_ React.createElement
								@ StyledHtmlElement
								{
									@ htmlFragmentMeta c
									@ cssRules cssRules
									@ key "k" + i
					elif c.text
						_ children.push(c.text)
			
			var modStyles = {}
			if cssRules
				for var k in cssRules
					if htmlFragmentMeta.class && htmlFragmentMeta.class.split(' ').indexOf(k) > -1
						for var z in cssRules[k]
							set modStyles[z] = cssRules[k][z]
					foreach selector in ['hover','focus']
						const nameLen = selector.length + 1
						if k.slice(-nameLen) === ':' + selector
							# log 'selector', k, this.state.elementSelectorStates
							if this.state.elementSelectorStates[k]
								# log 'I should set ' + selector + ' rule on', k
								for var z in cssRules[k]
									set modStyles[z] = cssRules[k][z]
			
			# log 'React.createElement', htmlFragmentMeta.tag, elementProps, children
			
			return
				_ React.createElement
					@ htmlFragmentMeta.tag
					{
						@ ...elementProps
						@ ...this.state.elementEvents
						@ style
							{
								@ ...modStyles
					@ children.length > 0 ? children : null

		style