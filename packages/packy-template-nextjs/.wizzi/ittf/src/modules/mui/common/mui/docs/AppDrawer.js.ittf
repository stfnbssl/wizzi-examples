module
	kind react

	$
		var md = { name: 'AppDrawer' }
		var app = {}
	
	app/component(&md, &app)

		$append imports
			import List from '@material-ui/core/List'
			import Toolbar from '@material-ui/core/Toolbar'
			import Drawer from '@material-ui/core/Drawer'
			import Typography from '@material-ui/core/Typography'
			import Divider from '@material-ui/core/Divider'
			import AppDrawerNavItem from './AppDrawerNavItem'
			import Link from './Link'

			var routesBasepath = '${app.routeBasepath}'

			function renderNavItems
				param props
				param navRoot
			
				# log 'renderNavItems.props.navRoot', props, navRoot
			
				let navItems = null
			
				if navRoot.childRoutes && navRoot.childRoutes.length
					# eslint-disable-next-line no-use-before-define
					set navItems
						_ navRoot.childRoutes.reduce
							_ reduceChildRoutes.bind(null, props)
							[
				return
					< List
						+ {navItems}

			function reduceChildRoutes
				param props
				param items
				param childRoute
				param index
				# log 'reduceChildRoutes.childRoute' , childRoute , index, props
				if childRoute.nav
					if childRoute.childRoutes && childRoute.childRoutes.length
						const openImmediately = props.routes.indexOf(childRoute) !== -1 || false
						_ items.push
							< AppDrawerNavItem
								@ key {index}
								@ openImmediately {openImmediately}
								@ title {childRoute.title}
								+ {renderNavItems(props, childRoute)}
					else
						_ items.push
							< AppDrawerNavItem
								@ key {index}
								@ title {childRoute.title}
								@ to {childRoute.path}
								@ onClick {props.onRequestClose}
						
				return items

		prop classes
			{
			required
		prop className
			string
		prop docked
			boolean
			required
		prop onRequestClose
			func
			required
		prop open
			boolean
			required
		prop routes
			[
			required
			
		render
		
			prop classes
			prop className
			prop open
			prop onRequestClose
			prop docked
			prop routes

			log 'AppDrawer.routes[0]', routes[0]

			return
				< Drawer
					@ className {className}
					@ classes
						{
							@ paper classes.paper
					@ open {open}
					@ onRequestClose {onRequestClose}
					@ docked {docked}
					div
						@ className {classes.nav}
						< Toolbar
							@ className {classes.toolbar}
							< Link
								@ className {classes.title}
								@ to {routesBasepath + "/"}
								@ onClick {onRequestClose}
								< Typography
									@ type "title"
									@ gutterBottom colorInherit
									+ ${app.title}
							< Divider
								@ absolute
						+ {renderNavItems(this.props, routes[0])}

		style

			@ paper
				{ 
					@ width 250
					@ backgroundColor theme.palette.background.paper
			@ title
				{ 
					@ color theme.palette.text.secondary
					@ '&:hover'
						{ 
							@ color theme.palette.primary[500]
			@ toolbar
				{ 
					@ flexDirection 'column'
					@ alignItems 'flex-start'
					@ justifyContent 'center'
			@ anchor
				{ 
					@ color theme.palette.text.secondary
