module
    kind es6
    import { Schema, model } from "mongoose"
    $if app.Build.auth.passport.useLocal
        const crypto = require('crypto')
        const jwt = require('jsonwebtoken')

    const UserSchema
        new Schema
            { 
                { userName
                    @ type String
                { realName
                    @ type String
                { email
                    @ type String
                $if app.Build.auth.passport.useLocal
                    { hash
                        @ type String
                    { salt
                        @ type String
            { 
                @ collection 'users'

    $if app.Build.auth.passport.useLocal
        set UserSchema.methods.setPassword =
            function 
                param password
                set this.salt = crypto.randomBytes(16).toString('hex')
                set this.hash = crypto.pbkdf2Sync(password, this.salt, 10000, 512, 'sha512').toString('hex')
                log 'features.auth.mongo.user.setPassword.salt,hash', this.salt, this.hash
        set UserSchema.methods.validatePassword =
            function 
                param password
                const hash = crypto.pbkdf2Sync(password, this.salt, 10000, 512, 'sha512').toString('hex')
                log 'features.auth.mongo.user.validatePassword.hash,this.hash', hash, this.hash
                return this.hash === hash
        set UserSchema.methods.generateJWT =
            function 
                const today = new Date()
                const expirationDate = new Date(today)
                _ expirationDate.setDate
                    op+ 
                        _ today.getDate
                        + 60
                return 
                    _ jwt.sign
                        { 
                            @ email this.email
                            @ id this._id
                            @ exp
                                _ parseInt
                                    op/ 
                                        _ expirationDate.getTime
                                        + 1000
                                    @ 10
                        @ 'secret'
        
        set UserSchema.methods.toAuthJSON =
            function 
                return 
                    { 
                        @ _id this._id
                        @ email this.email
                        @ token
                            _ this.generateJWT

    let userModel = null
    
    export
        function GetUserModel
            return userModel
    
    export
        const UserModelBuilder
            { 
                @ buildModel
                    => 
                        set userModel = model('User', UserSchema)
