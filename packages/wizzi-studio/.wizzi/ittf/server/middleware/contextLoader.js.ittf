module
	kind jsfile

	import path
	import async
	var stringify = require('json-stringify-safe')
	var wizzi = require('wizzi')
	var verify = wizzi.verify
	var prettify = require('wizzi-utils').prettifyFromString
	var config = require('../config')

	#
		# req.query._context contains a semicolon separated list of
		# context models export names. 
		# For each <export-name> must exists a req.query._<export-name> parameter 
		# with a type;path value.
		# The type is the model knwon type or a wizzi schema, the path is the 
		# relative path of the ittf document of the model, relative to the
		# filepath of the requested resource.
		#
		# Example
		#   req.query._context = 'cs;info'
		#   req.query._cs = 'cheatsheet;html'
		#   req.query._info = 'json;../cslayout.json.ittf'
		#
		# If the path value is missing it defaults to ./index.<type>.ittf
		#
	set module.exports
		function
			param resourceFilePath
			param req
			param callback

			var contextRequest = req.query._context
			if verify.isEmpty(contextRequest)
				var ss = path.basename(resourceFilePath).split('.')
				log 'ittf 1', resourceFilePath
				if ss[ss.length-1] === 'ittf' && ss[ss.length-2] !== 'json'
					var seedName = ss.slice(0, -2).join('.')
					log 'ittf 2', seedName
					var twinJsonPath
						_ path.join
							@ path.dirname(resourceFilePath)
							@ seedName + '.json.ittf'
					log 'ittf 3', twinJsonPath
					if wizzi.file.isFile(twinJsonPath)
						_ return
							_ buildTwinJsonContext
								@ 'mpage'
								@ twinJsonPath
								@ callback
					else
						_ return
							_ callback
								@ null
								{
				else
					_ return
						_ callback
							@ null
							{
			# var userId = req.user.id
			var ss = contextRequest.split(';')
			var requests = []
			foreach s in ss
				var request
					{
						@ exportName s
				var type_path = req.query['_' + s]
				log 'contextLoader exportName, type_path', s, type_path
				if verify.isEmpty(type_path)
					_ return
						_ callback
							{
								@ requestedResource resourceFilePath
								@ message 'Missing query param for requested context model: ' + s

				var tp = type_path.split(';')
				set request.type = tp[0]
				if tp.length < 2
					set request.relPath = './index.' + tp[0] + '.ittf'
				else
					set request.relPath = tp[1]
				log 'contextLoader exportName, type_path, relPath', s, type_path, request.relPath

				if request.type === 'cheatsheet'
					set request.name = request.relPath
					_ requests.push
						@ request
				else
					set request.fullPath
						_ path.join
							_ path.dirname
								@ resourceFilePath
							@ request.relPath
					_ requests.push
						@ request
				log 'contextLoader request', request

			log 'contextLoader.requests', requests
			var resultContext = {}
			_ async.map
				@ requests
				function
					param request
					param callback
					if request.type === 'cheatsheet'
						return
							_ loadCheatsheet
								@ request.name
								f_cb(model)
									set resultContext[request.exportName] = model
									r_cb()
					else
						return
							_ wizzi.model
								@ request.fullPath
								f_cb(model)
									set resultContext[request.exportName] = model
									r_cb()
				f_cb()
					r_cb(resultContext)

	function buildTwinJsonContext
		param exportName
		param twinJsonPath
		param callback
		_ wizzi.model
			@ twinJsonPath
			f_cb(model)
				log 'ittf 4', model.wzElement
				return
					_ callback
						@ null
						{
							@ [exportName] model

	$include loadCheatsheet

	function wrapperForSchema
		param schema
		if schema === 'js' || schema === 'jsx'
			return
				{
					@ n 'module'
					[ children
						{
							@ n 'kind'
							@ v 'react'
							[ children
		elif schema === 'ts'
			return
				{
					@ n 'module'
					[ children
		else
			return
				{
					@ n schema
					[ children

