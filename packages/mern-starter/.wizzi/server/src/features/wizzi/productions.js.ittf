module
    kind es6
    import 
        as path
        from 'path'
    import 
        as fs
        from 'fs'
    import 
        as wizzi
        from 'wizzi'
    import 
        @ ittfDocumentScanner
        @ folderBrowse
        @ IttfMTreeState
        @ FolderBrowseResult
        from 'wizzi-utils'
    import 
        @ config
        from '../config'
    import 
        @ createFilesystemFactory
        from './factory'
    
    export 
        async-function loadModelFs
            param filePath
            param context
            return 
                new Promise
                    async=> 
                        param resolve
                        param reject
                        const schemaName = schemaFromFilePath(filePath)
                        if !schemaName
                            return reject('File is not a known ittf document: ' + filePath)
                        const wf
                            await 
                                _ createFilesystemFactory
                        _ wf.loadModel
                            @ schemaName
                            @ filePath
                            { 
                                @ mTreeBuildUpContext context
                            => 
                                param err
                                param result
                                if err
                                    return reject(err)
                                # console.log('Generated artifact', result);
                                _ resolve(result)
    
    export 
        async-function generateArtifactFs
            param filePath
            param context
            return 
                new Promise
                    async=> 
                        param resolve
                        param reject
                        const generator = generatorFor(filePath)
                        if generator
                            _ console.log('using artifact generator', generator)
                            const wf
                                await 
                                    _ createFilesystemFactory
                            const generationContext
                                { 
                                    { modelRequestContext
                                        @ mTreeBuildUpContext context || {}
                            _ wf.loadModelAndGenerateArtifact
                                @ filePath
                                @ generationContext
                                @ generator
                                => 
                                    param err
                                    param result
                                    if err
                                        return reject(err)
                                    _ console.log('Generated artifact', result)
                                    _ resolve
                                        { 
                                            @ artifactContent result
                                            @ sourcePath filePath
                                            @ artifactGenerator generator
                        else
                            _ reject('No artifact generator available for document ' + filePath)
    
    export 
        async-function scanIttfDocumentFs
            param filePath
            param rootFolder
            return 
                new Promise
                    => 
                        param resolve
                        param reject
                        _ ittfDocumentScanner.scan
                            @ filePath
                            { 
                                @ rootFolder
                            => 
                                param err
                                param result
                                if err
                                    return reject(err)
                                _ resolve(result)
    
    export 
        async-function scanIttfFolderFs
            param filePath
            param rootFolder
            return 
                new Promise
                    => 
                        param resolve
                        param reject
                        _ folderBrowse.scan
                            @ filePath
                            { 
                                @ rootFolder
                            => 
                                param err
                                param result
                                if err
                                    return reject(err)
                                _ resolve(result)
    
    export 
        async-function inferAndLoadContextFs
            param filePath
            param exportName
            return 
                new Promise
                    => 
                        param resolve
                        param reject
                        const pf = parseFilePath(filePath)
                        if pf.isIttfDocument && pf.schema !== 'json'
                            var twinJsonPath = path.join(path.dirname(filePath), pf.seedname + '.json.ittf')
                            if fs.existsSync(twinJsonPath)
                                _ loadModelFs(twinJsonPath, {}).then
                                    => 
                                        param model
                                        _ resolve
                                            { 
                                                @ [exportName] model
                                    ._ catch
                                        => 
                                            param err
                                            _ reject(err)
                            else
                                _ resolve({})
                        else
                            _ resolve({})
    
    const schemaModuleMap
        { 
            @ css 'css/document'
            @ graphql 'graphql/document'
            @ ittf 'ittf/document'
            @ js 'js/module'
            @ json 'json/document'
            @ html 'html/document'
            @ scss 'scss/document'
            @ svg 'svg/document'
            @ text 'text/document'
            @ ts 'ts/module'
            @ vml 'vml/document'
            @ vue 'vue/document'
            @ xml 'xml/document'
    
    function generatorFor
        param filePath
        const pf = parseFilePath(filePath)
        if pf.isIttfDocument
            return schemaModuleMap[pf.schema]
        return undefined
    
    function schemaFromFilePath
        param filePath
        const pf = parseFilePath(filePath)
        if pf.isIttfDocument
            return pf.schema
        return undefined
    
    export 
        function parseFilePath
            param filePath
            const nameParts = path.basename(filePath).split('.')
            if nameParts[nameParts.length - 1] === 'ittf'
                return 
                    { 
                        @ isIttfDocument true
                        @ schema nameParts[nameParts.length - 2]
                        @ seedname nameParts.slice(0, -2).join('.')
            else
                return 
                    { 
                        @ isIttfDocument false
                        @ schema nameParts[nameParts.length - 1]
                        @ seedname nameParts.slice(0, -1).join('.')
