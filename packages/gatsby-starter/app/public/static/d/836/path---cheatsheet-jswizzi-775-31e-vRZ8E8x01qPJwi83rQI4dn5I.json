{"data":{"cheatsheet":{"id":"55d624df-7b2b-5f2a-8ea7-8c3fa3ce0c55","csName":"jswizzi","elements":[{"name":"jsWizzi statements","items":[{"title":"Conditions in scripts","generated":"// 10/6/2019:15:16:21  by C:\\My\\wizzi\\wizzi-examples\\node_modules\\wizzi-mtree\\lib\\loader\\debugInfoBuilder.js\n$.n(); // set the context state to NodeContext\nvar $0 = {}; // the root node of the MTree buildup\nvar $1 = { n: \"root\", v: \"\", r: 1, c: 1, s: \"f1\", u: \"f1\",  }; //14\n$.a($0, $1, 5);\n$.s(\"f1\");\nvar name = 'Derby', winner = null; //16\nif (name == 'Ascot') { //17\nwinner = 'Ribot'; //18\n} else if (name == 'Arc de triomphe') { //19\nwinner = 'Varenne'; //20\n} else if (name == 'Derby') { //21\nwinner = 'Ribot'; //22\n} else { //23\nwinner = 'Varenne'; //24\n}  //25\n$.n();\nvar $3 = { n: \"node\", v: $.ip(\"f1\", \"If the race was ${name} the winner was ${winner}.\", \"string\", 18, false), r: 13, c: 5, s: \"f1\", u: \"f1\",  }; //26\n$.a($1, $3, 19);","ittfPretty":"<div class=\"L1\"><span class=\"pp-ln\">   1 </span><span class=\"pp-pln\"></span><span class=\"pp-tag\">root</span></div><div class=\"L2\"><span class=\"pp-ln\">   2 </span><span class=\"pp-pln\">    </span><span class=\"pp-kwd\">$</span></div><div class=\"L3\"><span class=\"pp-ln\">   3 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">var</span><span class=\"pp-expr\"> name = 'Derby', winner = null;</span></div><div class=\"L4\"><span class=\"pp-ln\">   4 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">if</span><span class=\"pp-expr\"> (name == 'Ascot') {</span></div><div class=\"L5\"><span class=\"pp-ln\">   5 </span><span class=\"pp-pln\">            </span><span class=\"pp-expr\">winner</span><span class=\"pp-expr\"> = 'Ribot';</span></div><div class=\"L6\"><span class=\"pp-ln\">   6 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">}</span><span class=\"pp-expr\"> else if (name == 'Arc de triomphe') {</span></div><div class=\"L7\"><span class=\"pp-ln\">   7 </span><span class=\"pp-pln\">            </span><span class=\"pp-expr\">winner</span><span class=\"pp-expr\"> = 'Varenne';</span></div><div class=\"L8\"><span class=\"pp-ln\">   8 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">}</span><span class=\"pp-expr\"> else if (name == 'Derby') {</span></div><div class=\"L9\"><span class=\"pp-ln\">   9 </span><span class=\"pp-pln\">            </span><span class=\"pp-expr\">winner</span><span class=\"pp-expr\"> = 'Ribot';</span></div><div class=\"L0\"><span class=\"pp-ln\">  10 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">}</span><span class=\"pp-expr\"> else {</span></div><div class=\"L1\"><span class=\"pp-ln\">  11 </span><span class=\"pp-pln\">            </span><span class=\"pp-expr\">winner</span><span class=\"pp-expr\"> = 'Varenne';</span></div><div class=\"L2\"><span class=\"pp-ln\">  12 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">}</span></div><div class=\"L3\"><span class=\"pp-ln\">  13 </span><span class=\"pp-pln\">    </span><span class=\"pp-tag\">node</span><span class=\"pp-pln\"> If the race was </span><span class=\"pp-kwd\">${</span><span class=\"pp-expr\">name</span><span class=\"pp-kwd\">}</span><span class=\"pp-pln\"> the winner was </span><span class=\"pp-kwd\">${</span><span class=\"pp-expr\">winner</span><span class=\"pp-kwd\">}</span><span class=\"pp-pln\">.</span></div>"},{"title":"Conditions in markup","generated":"// 10/6/2019:15:16:21  by C:\\My\\wizzi\\wizzi-examples\\node_modules\\wizzi-mtree\\lib\\loader\\debugInfoBuilder.js\n$.n(); // set the context state to NodeContext\nvar $0 = {}; // the root node of the MTree buildup\nvar $1 = { n: \"root\", v: \"\", r: 1, c: 1, s: \"f1\", u: \"f1\",  }; //12\n$.a($0, $1, 5);\n$.s(\"f1\");\nvar name = 'Derby'; //14\nif (name == 'Ascot') { //15\n    $.n();\n    var $4 = { n: \"node\", v: $.ip(\"f1\", \"If the race was ${name} the winner was Ribot\", \"string\", 10, false), r: 5, c: 9, s: \"f1\", u: \"f1\",  }; //16\n    $.a($1, $4, 11);\n}\nelse if (name == 'Arc de triomphe') { //17\n    $.n();\n    var $6 = { n: \"node\", v: $.ip(\"f1\", \"If the race was ${name} the winner was Varenne\", \"string\", 15, false), r: 7, c: 9, s: \"f1\", u: \"f1\",  }; //18\n    $.a($1, $6, 16);\n}\nelse if (name == 'Derby') { //19\n    $.n();\n    var $8 = { n: \"node\", v: $.ip(\"f1\", \"If the race was ${name} the winner was Ribot\", \"string\", 20, false), r: 9, c: 9, s: \"f1\", u: \"f1\",  }; //20\n    $.a($1, $8, 21);\n}\nelse {\n    $.n();\n    var $10 = { n: \"node\", v: $.ip(\"f1\", \"If the race was ${name} the winner was Varenne\", \"string\", 25, false), r: 11, c: 9, s: \"f1\", u: \"f1\",  }; //22\n    $.a($1, $10, 26);\n}","ittfPretty":"<div class=\"L1\"><span class=\"pp-ln\">   1 </span><span class=\"pp-pln\"></span><span class=\"pp-tag\">root</span></div><div class=\"L2\"><span class=\"pp-ln\">   2 </span><span class=\"pp-pln\">    </span><span class=\"pp-kwd\">$</span></div><div class=\"L3\"><span class=\"pp-ln\">   3 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">var</span><span class=\"pp-expr\"> name = 'Derby';</span></div><div class=\"L4\"><span class=\"pp-ln\">   4 </span><span class=\"pp-pln\">    </span><span class=\"pp-kwd\">$if</span><span class=\"pp-expr\"> name == 'Ascot'</span></div><div class=\"L5\"><span class=\"pp-ln\">   5 </span><span class=\"pp-pln\">        </span><span class=\"pp-tag\">node</span><span class=\"pp-pln\"> If the race was </span><span class=\"pp-kwd\">${</span><span class=\"pp-expr\">name</span><span class=\"pp-kwd\">}</span><span class=\"pp-pln\"> the winner was Ribot</span></div><div class=\"L6\"><span class=\"pp-ln\">   6 </span><span class=\"pp-pln\">    </span><span class=\"pp-kwd\">$elif</span><span class=\"pp-pln\"> name == 'Arc de triomphe'</span></div><div class=\"L7\"><span class=\"pp-ln\">   7 </span><span class=\"pp-pln\">        </span><span class=\"pp-tag\">node</span><span class=\"pp-pln\"> If the race was </span><span class=\"pp-kwd\">${</span><span class=\"pp-expr\">name</span><span class=\"pp-kwd\">}</span><span class=\"pp-pln\"> the winner was Varenne</span></div><div class=\"L8\"><span class=\"pp-ln\">   8 </span><span class=\"pp-pln\">    </span><span class=\"pp-kwd\">$elif</span><span class=\"pp-pln\"> name == 'Derby'</span></div><div class=\"L9\"><span class=\"pp-ln\">   9 </span><span class=\"pp-pln\">        </span><span class=\"pp-tag\">node</span><span class=\"pp-pln\"> If the race was </span><span class=\"pp-kwd\">${</span><span class=\"pp-expr\">name</span><span class=\"pp-kwd\">}</span><span class=\"pp-pln\"> the winner was Ribot</span></div><div class=\"L0\"><span class=\"pp-ln\">  10 </span><span class=\"pp-pln\">    </span><span class=\"pp-kwd\">$else</span></div><div class=\"L1\"><span class=\"pp-ln\">  11 </span><span class=\"pp-pln\">        </span><span class=\"pp-tag\">node</span><span class=\"pp-pln\"> If the race was </span><span class=\"pp-kwd\">${</span><span class=\"pp-expr\">name</span><span class=\"pp-kwd\">}</span><span class=\"pp-pln\"> the winner was Varenne</span></div>"},{"title":"For loop in scripts","generated":"// 10/6/2019:15:16:21  by C:\\My\\wizzi\\wizzi-examples\\node_modules\\wizzi-mtree\\lib\\loader\\debugInfoBuilder.js\n$.n(); // set the context state to NodeContext\nvar $0 = {}; // the root node of the MTree buildup\nvar $1 = { n: \"root\", v: \"\", r: 1, c: 1, s: \"f1\", u: \"f1\",  }; //11\n$.a($0, $1, 5);\n$.s(\"f1\");\nvar sletters = 'a,b,c,d,e,f,g,h'; //13\nvar aletters = sletters.split(','); //14\nvar letter, label=''; //15\nfor (var i=0; i&lt;aletters.length; i++) { //16\nletter = aletters[i]; //17\nlabel += i % 2 == 0 ? letter : letter.toUpperCase(); //18\n}  //19\n$.n();\nvar $3 = { n: \"node\", v: $.ip(\"f1\", \"The resulting label has the even letters upper cased: ${label}.\", \"string\", 15, false), r: 10, c: 5, s: \"f1\", u: \"f1\",  }; //20\n$.a($1, $3, 16);","ittfPretty":"<div class=\"L1\"><span class=\"pp-ln\">   1 </span><span class=\"pp-pln\"></span><span class=\"pp-tag\">root</span></div><div class=\"L2\"><span class=\"pp-ln\">   2 </span><span class=\"pp-pln\">    </span><span class=\"pp-kwd\">$</span></div><div class=\"L3\"><span class=\"pp-ln\">   3 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">var</span><span class=\"pp-expr\"> sletters = 'a,b,c,d,e,f,g,h';</span></div><div class=\"L4\"><span class=\"pp-ln\">   4 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">var</span><span class=\"pp-expr\"> aletters = sletters.split(',');</span></div><div class=\"L5\"><span class=\"pp-ln\">   5 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">var</span><span class=\"pp-expr\"> letter, label='';</span></div><div class=\"L6\"><span class=\"pp-ln\">   6 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">for</span><span class=\"pp-expr\"> (var i=0; i&lt;aletters.length; i++) {</span></div><div class=\"L7\"><span class=\"pp-ln\">   7 </span><span class=\"pp-pln\">            </span><span class=\"pp-expr\">letter</span><span class=\"pp-expr\"> = aletters[i];</span></div><div class=\"L8\"><span class=\"pp-ln\">   8 </span><span class=\"pp-pln\">            </span><span class=\"pp-expr\">label</span><span class=\"pp-expr\"> += i % 2 == 0 ? letter : letter.toUpperCase();</span></div><div class=\"L9\"><span class=\"pp-ln\">   9 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">}</span></div><div class=\"L0\"><span class=\"pp-ln\">  10 </span><span class=\"pp-pln\">    </span><span class=\"pp-tag\">node</span><span class=\"pp-pln\"> The resulting label has the even letters upper cased: </span><span class=\"pp-kwd\">${</span><span class=\"pp-expr\">label</span><span class=\"pp-kwd\">}</span><span class=\"pp-pln\">.</span></div>"},{"title":"For loop in markup","generated":"// 10/6/2019:15:16:21  by C:\\My\\wizzi\\wizzi-examples\\node_modules\\wizzi-mtree\\lib\\loader\\debugInfoBuilder.js\n$.n(); // set the context state to NodeContext\nvar $0 = {}; // the root node of the MTree buildup\nvar $1 = { n: \"root\", v: \"\", r: 1, c: 1, s: \"f1\", u: \"f1\",  }; //8\n$.a($0, $1, 5);\n$.s(\"f1\");\nvar sletters = 'a,b,c,d,e,f,g,h'; //10\nvar aletters = sletters.split(','); //11\n$.n();\nvar $3 = { n: \"node\", v: \"The resulting tree has the even node values upper cased:\", r: 5, c: 5, s: \"f1\", u: \"f1\",  }; //12\n$.a($1, $3, 11);\n$.s(\"f1\");\nvar letter_count = aletters.length; //13\nfor (var i4=0; i4&lt;letter_count; i4++) { //13\n    var letter = aletters[i4]; //13\n    var letter_index = i4; //13\n    $.n();\n    var $5 = { n: \"node\", v: $.ip(\"f1\", \"${ _index} ${ _index % 2 == 0 ? letter : letter.toUpperCase() }\", \"string\", 18, false), r: 7, c: 13, s: \"f1\", u: \"f1\",  }; //14\n    $.a($3, $5, 19);\n}","ittfPretty":"<div class=\"L1\"><span class=\"pp-ln\">   1 </span><span class=\"pp-pln\"></span><span class=\"pp-tag\">root</span></div><div class=\"L2\"><span class=\"pp-ln\">   2 </span><span class=\"pp-pln\">    </span><span class=\"pp-kwd\">$</span></div><div class=\"L3\"><span class=\"pp-ln\">   3 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">var</span><span class=\"pp-expr\"> sletters = 'a,b,c,d,e,f,g,h';</span></div><div class=\"L4\"><span class=\"pp-ln\">   4 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">var</span><span class=\"pp-expr\"> aletters = sletters.split(',');</span></div><div class=\"L5\"><span class=\"pp-ln\">   5 </span><span class=\"pp-pln\">    </span><span class=\"pp-tag\">node</span><span class=\"pp-pln\"> The resulting tree has the even node values upper cased:</span></div><div class=\"L6\"><span class=\"pp-ln\">   6 </span><span class=\"pp-pln\">        </span><span class=\"pp-kwd\">$foreach</span><span class=\"pp-pln\"> letter in aletters</span></div><div class=\"L7\"><span class=\"pp-ln\">   7 </span><span class=\"pp-pln\">            </span><span class=\"pp-tag\">node</span><span class=\"pp-kwd\"> ${</span><span class=\"pp-expr\"> _index</span><span class=\"pp-kwd\">}</span><span class=\"pp-pln\"> </span><span class=\"pp-kwd\">${</span><span class=\"pp-expr\"> _index % 2 == 0 ? letter : letter.toUpperCase() </span><span class=\"pp-kwd\">}</span></div>"},{"title":"While loop in scripts","generated":"// 10/6/2019:15:16:21  by C:\\My\\wizzi\\wizzi-examples\\node_modules\\wizzi-mtree\\lib\\loader\\debugInfoBuilder.js\n$.n(); // set the context state to NodeContext\nvar $0 = {}; // the root node of the MTree buildup\nvar $1 = { n: \"root\", v: \"\", r: 1, c: 1, s: \"f1\", u: \"f1\",  }; //9\n$.a($0, $1, 5);\n$.s(\"f1\");\nvar x = 1, odds = '1'; //11\nwhile ( x &lt; 10 ) { //12\nx += 2; //13\nodds += ', ' + x //14\n}  //15\n$.n();\nvar $3 = { n: \"node\", v: $.ip(\"f1\", \"First odd numbers: ${odds}.\", \"string\", 13, false), r: 8, c: 5, s: \"f1\", u: \"f1\",  }; //16\n$.a($1, $3, 14);","ittfPretty":"<div class=\"L1\"><span class=\"pp-ln\">   1 </span><span class=\"pp-pln\"></span><span class=\"pp-tag\">root</span></div><div class=\"L2\"><span class=\"pp-ln\">   2 </span><span class=\"pp-pln\">    </span><span class=\"pp-kwd\">$</span></div><div class=\"L3\"><span class=\"pp-ln\">   3 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">var</span><span class=\"pp-expr\"> x = 1, odds = '1';</span></div><div class=\"L4\"><span class=\"pp-ln\">   4 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">while</span><span class=\"pp-expr\"> ( x &lt; 10 ) {</span></div><div class=\"L5\"><span class=\"pp-ln\">   5 </span><span class=\"pp-pln\">            </span><span class=\"pp-expr\">x</span><span class=\"pp-expr\"> += 2;</span></div><div class=\"L6\"><span class=\"pp-ln\">   6 </span><span class=\"pp-pln\">            </span><span class=\"pp-expr\">odds</span><span class=\"pp-expr\"> += ', ' + x</span></div><div class=\"L7\"><span class=\"pp-ln\">   7 </span><span class=\"pp-pln\">        </span><span class=\"pp-expr\">}</span></div><div class=\"L8\"><span class=\"pp-ln\">   8 </span><span class=\"pp-pln\">    </span><span class=\"pp-tag\">node</span><span class=\"pp-pln\"> First odd numbers: </span><span class=\"pp-kwd\">${</span><span class=\"pp-expr\">odds</span><span class=\"pp-kwd\">}</span><span class=\"pp-pln\">.</span></div>"},{"title":"While loop in markup","generated":"// 10/6/2019:15:16:21  by C:\\My\\wizzi\\wizzi-examples\\node_modules\\wizzi-mtree\\lib\\loader\\debugInfoBuilder.js\n$.n(); // set the context state to NodeContext\nvar $0 = {}; // the root node of the MTree buildup\nvar $1 = { n: \"root\", v: \"\", r: 1, c: 1, s: \"f1\", u: \"f1\",  }; //6\n$.a($0, $1, 5);\n$.s(\"f1\");\nvar x = 1, odds = '1'\nwhile (x &lt; 10) { //8\n    $.s(\"f1\");\n    x += 2\n    $.n();\n    var $5 = { n: \"node\", v: $.ip(\"f1\", \"${ odds += ', ' + x }\", \"string\", 12, false), r: 5, c: 9, s: \"f1\", u: \"f1\",  }; //10\n    $.a($1, $5, 13);\n}","ittfPretty":"<div class=\"L1\"><span class=\"pp-ln\">   1 </span><span class=\"pp-pln\"></span><span class=\"pp-tag\">root</span></div><div class=\"L2\"><span class=\"pp-ln\">   2 </span><span class=\"pp-pln\">    </span><span class=\"pp-kwd\">$</span><span class=\"pp-pln\"> var x = 1, odds = '1'</span></div><div class=\"L3\"><span class=\"pp-ln\">   3 </span><span class=\"pp-pln\">    </span><span class=\"pp-kwd\">$while</span><span class=\"pp-pln\"> x &lt; 10</span></div><div class=\"L4\"><span class=\"pp-ln\">   4 </span><span class=\"pp-pln\">        </span><span class=\"pp-kwd\">$</span><span class=\"pp-pln\"> x += 2</span></div><div class=\"L5\"><span class=\"pp-ln\">   5 </span><span class=\"pp-pln\">        </span><span class=\"pp-tag\">node</span><span class=\"pp-kwd\"> ${</span><span class=\"pp-expr\"> odds += ', ' + x </span><span class=\"pp-kwd\">}</span></div>"}]}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"jswizzi"}}